#!/usr/bin/python
# coding=utf-8

from BioUtils.GeneClusters import ClusterFinder
from BioUtils.Tools.Multiprocessing import MPMain


class Main(MPMain):
    description = 'Process genomes annotated by blast_annotate_genomes to find putative gene clusters.'

    def _main(self):
        self.argument('-C', '--clusters', metavar='/path/to/cluster.file', nargs='+',
                      required=True,
                      type=str, help='A cluster definition file that contains two lines:\n'
                                     'gene tags divided by spaces that constitute full cluster,\n'
                                     'gene tags divided by spaces that constitute functional core.\n'
                                     'If only one line is given, it is considered to be the core.\n'
                                     'Gene tags divided by "|" operator are considered as alternatives.')

        self.argument('files', metavar='/path/to/file', nargs='+',
                      type=str, help='Paths to files with genomes.')

        self.argument('-d', '--output-dir', metavar='path', default='',
                      type=str, help='Directory to save annotated file.')

        self.argument('-c', '--min-coverage', default=0.1, metavar='float',
                      type=float,
                      help='Minimum overlap of a tag and a gene to consider the gene tagged.')
        self.parse_args()
        #make everything in parallel
        finder = ClusterFinder(self.abort_event)
        if not finder.load(self.args.clusters):
            return 1
        finder.find_clusters(self.args.files, self.args.output_dir)
        return 0

if __name__ == '__main__':
    Main(run=True)
