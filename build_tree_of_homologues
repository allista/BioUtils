#!/usr/bin/python
# coding=utf-8

'''
Created on Mar 15, 2016

@author: Allis Tauri <allista@gmail.com>
'''

import os
import shlex

import re

from BioUtils.NCBI.BlastBase import SelectedIDs
from BioUtils.Tools import PipelineNode

from Bio.Alphabet import DNAAlphabet, ProteinAlphabet

from BioUtils.NCBI import BlastWWW
from BioUtils.Tools.Output import user_message
from BioUtils.Tools.Multiprocessing import MPMain
from BioUtils.NCBI import BlastCLI, UniqueIDs
from BioUtils.SeqUtils import safe_write, load_files, unique_records, common_alphabet
from BioUtils.AlignmentUtils import AlignmentUtils
from BioUtils.PhyloUtils import PhyloUtils
from BioUtils.Taxonomy import Organisms


class Main(MPMain):
    description = 'Blast provided sequence, get the results, align everything and build a fast-ML tree.'

    # @PipelineNode.new()
    # def _annotate_tree(self):
    #     organisms = Organisms.from_records(seqs)
    #     colors = PhyloUtils.parse_colors(self.args.colors) if self.args.colors else None
    #     marks += [q.id for q in query]
    #     if PhyloUtils.annotate_tree(treefile, organisms,
    #                                 beautify_leafs=True,
    #                                 reroot_at=self.args.reroot_at,
    #                                 collapse_last=self.args.collapse_last or self.args.collapse_hard,
    #                                 collapse_hard=self.args.collapse_hard,
    #                                 mark_leafs=set(marks),
    #                                 min_support=self.args.min_support,
    #                                 lineage_colors=colors
    #                                 ): return 0
    #     pass

    def _get_soi(self):
        # get sequence of interest ids
        marks = []
        if self.args.mark_leafs:
            if os.path.isfile(self.args.mark_leafs):
                print 'Reading additional marker IDs from: %s' % self.args.mark_leafs
                with open(self.args.mark_leafs) as inp:
                    marks = shlex.split(inp.read(), comments='#')
            else:
                print 'Parsing additional marker IDs from command line.'
                marks = shlex.split(self.args.mark_leafs)
        if marks: print 'Additional markers: %s\n' % ', '.join(marks)
        return marks

    def _main(self):
        self.argument('project', metavar='project name', default=None,
                      type=str, help='The basename of current analysis project.')
        self.argument('email', metavar='you.address@domain.com',
                      type=str, help='Your email is required by NCBI to use its online services through scripting API.')
        self.argument('files', metavar='/path/to/file', nargs='+',
                      type=str, help='Paths to files containing query sequences.')

        self.argument('-f', '--force', action='store_true',
                      help='Perform all computations, even if cached results are available.')
        # blast arguments
        self.argument('-L', '--blast-batch-length', default=3000, metavar='int',
                      type=int, help='Combine query sequences into batch query no longer that this.')
        self.argument('-E', '--evalue', default=0.01, metavar='float',
                      type=float, help='Filter out results with evalue greater then this. Default 0.01')
        self.argument('-s', '--min-bit-score', default=0, metavar='float',
                      type=float, help='Filter out results with a bitscore less then this. Default 0')
        self.argument('-i', '--min-identity', default=0.5, metavar='float',
                      type=float, help='Filter out alignments with identity percent less then this. Default 0.5')
        self.argument('-l', '--min-length', default=0, metavar='float',
                      type=float, help='Filter out results the length less then min-length*query-length. '
                                       'Should be in the [0, 1) interval. Default 0')
        self.argument('-F', '--filter-homologues', default=-1,
                      type=float,
                      help='Filter out close homologues from blast results using percent of identity cutoff.')
        self.argument('--manual-filter', default='', metavar='filter.file',
                      type=str,
                      help='A file with regular regular expressions (one per line) that are matched against '
                           'sequence ID and DEFINITION. Matched sequences are filtered OUT.')
        # tree arguments
        self.argument('--fasttree-args', default=[], metavar='str', nargs="*",
                      type=str,
                      help='Additional arguments for fasttree program in the form: '
                           'arg1=value1 arg2=value2 arg3 arg4. Argument names should not start with "-".')
        self.argument('-c', '--collapse-at-level', default=0, metavar='int',
                      type=int,
                      help='Collapse subtrees of the taxonomy of this level (1 - prokaryotes, 2 - bacteria...) '
                           'with number of leafs >= 2.')
        self.argument('-C', '--collapse-hard', default=0, metavar='int',
                      type=int,
                      help='Same as collapse-at-level, but the collapsed subtrees are replaced by a single node.')
        self.argument('-r', '--reroot-at', metavar='sequence ID', default=None,
                      type=str, help='Reroot the tree using this sequence as outgroup. Accepts special values: '
                                     '"midpoint" and "unroot".')
        self.argument('-m', '--min-support', default=None, metavar='float',
                      type=float, help='Collapse splits with support < min-support.')
        self.argument('-M', '--mark-leafs', default=None, metavar='accession',
                      type=str, help='Mark leafs specified by accession number in Dendroscope.')
        # self.argument('--hide-support', action='store_true',
        #               help='Hide support values in Dendroscope by default.')
        self.argument('--hide-taxonomy', action='store_true',
                      help='Hide support edge taxonomy labels in Dendroscope by default.')
        self.argument('--colors', metavar='"archaea:#f3ad6;bacteria:blue"',
                      type=str, help='Colorize tree edges by phylogeny using provided colors '
                                     'for Dendroscope. Both html notation and predefined color '
                                     'names are supported.')
        self.parse_args()
        # get the query
        query = load_files(self.abort_event, self.args.files, guess_alphabet=True)
        if not query:
            print 'No sequence was loaded from %s' % self.args.files
            return 1
        # check queries alphabet
        same, alphabet = common_alphabet(query)
        if not same:
            print 'All query sequences must have the same alphabet.\n' \
                  'Only extended protein and ambiguous DNA alphabets are supported.'
            return 11
        # check query sequences
        if isinstance(alphabet, ProteinAlphabet):
            protein = True
            prog = 'blastp'
            edb = 'protein'
            what = 'record'
            db = 'nr'
        else:
            protein = False
            prog = 'blastn'
            edb = 'nucleotide'
            what = 'alignment'
            db = 'nt'
        proj = self.args.project or ('%s-%s' % (query[0].id, prog))
        pdir = proj+'.files'
        try: os.mkdir(pdir)
        except: pass
        def pfile(suffix): return os.path.join(pdir, proj+suffix)
        print ('Project name: %s\n'
               'Query type:   %s\n'
               'Project folder: %s\n' % (proj, edb, pdir))
        # prepare batch queries
        batches = [[]]
        batch = batches[0]
        batch_len = 0
        for q in query:
            qlen = len(q)
            if batch and batch_len+qlen > self.args.blast_batch_length:
                batch = [q]
                batch_len = qlen
                batches.append(batch)
            else:
                batch.append(q)
                batch_len += qlen
        # get foi
        marks = self._get_soi()
        if self.args.reroot_at and self.args.reroot_at not in PhyloUtils.reroot_specials:
            marks.append(self.args.reroot_at)
        # prepare filter
        b_filter = UniqueIDs([rec.id for rec in query])
        b_filter.AndFilter(lambda a, r: a.hsps[0].align_length > r.query_length*self.args.min_length)
        b_filter.AndFilter(lambda a, r: all(hsp.score > self.args.min_bit_score for hsp in a.hsps))
        b_filter.AndFilter(lambda a, r: all(hsp.identities / float(hsp.align_length) > self.args.min_identity
                                            for hsp in a.hsps))
        b_filter.AND.OR = SelectedIDs(marks)
        # perform blast search
        blast = BlastCLI(self.abort_event)
        blast_results = []
        nbatches = len(batches)
        for i, batch in enumerate(batches):
            blast_file = pfile('-%03d.xml' % i)
            if self.args.force or not os.path.isfile(blast_file) or not os.path.getsize(blast_file):
                print ('Performing remote blast query %d/%d (%d letters)' %
                       (i+1, nbatches, sum(len(seq) for seq in batch)))
                results = blast.blast_seq(batch, db, command=prog, remote=True, save_results_to=blast_file,
                                          parse_results=True)
                self.args.force = True
            else:
                print '%s already exists. Parsing blast results.' % blast_file
                results = BlastWWW.load_results(blast_file)
            if blast.have_alignments(results): blast_results.extend(results)
        nresutls = blast.num_alignments(blast_results)
        if nresutls == 0:
            print 'No blast results.'
            return 2
        # filter blast results
        print '\nBlast returned %d alignments.' % nresutls
        b_filter(blast_results)
        nseqs = blast.num_alignments(blast_results)
        # blast.print_hsps(blast_results)
        print '%d alignments left after filtering.' % nseqs
        if nseqs == 0: return 3

        # fetch sequences from GenBank
        seqfile = pfile('.gb')
        if self.args.force or not os.path.isfile(seqfile):
            print 'Fetching blast results using Entrez'
            fetcher = BlastWWW(self.abort_event)
            seqs = fetcher.fetch_results(self.args.email, blast_results, from_dbs=[edb], what=what)
            if seqs: safe_write(seqs, seqfile, 'gb')
            self.args.force = True
        else:
            print '%s already exists. Loading previously fetched results.' % seqfile
            seqs = load_files(self.abort_event, [seqfile])
        if not seqs:
            print 'No blast records were fetched.'
            return 4
        nseqs = len(seqs)
        # for s in seqs: print '%s %s' % (s.id, s.description)
        print 'Fetched %d sequences from GenBank.\n' % nseqs

        # filter sequences
        filtered = pfile('.filtered.gb')
        if self.args.force or not os.path.isfile(filtered):
            if self.args.filter_homologues > 0:
                min_identity = min(self.args.filter_homologues, 1)
                seqs = blast.filter_homologues(seqs, min_identity, marks, nucleotide= edb == 'nucleotide')
            if seqs:
                safe_write(seqs, filtered, 'gb')
                self.args.force = True
        else:
            seqs = load_files(self.abort_event, [filtered])
        print '%d sequences left after filtering out homologues.' % len(seqs)
        # manual filter
        if os.path.isfile(self.args.manual_filter):
            with open(self.args.manual_filter) as inp:
                regexps = [re.compile(l) for l in (line.strip() for line in inp) if l]
                for i in range(len(seqs)-1,-1,-1):
                    s = seqs[i]
                    definition = ' '.join((s.id, s.description))
                    if any(r.match(definition) is not None for r in regexps):
                        del seqs[i]
            print '%d sequences left after manual filtering.' % len(seqs)
        # unique ID filter
        seqs = list(unique_records(query, seqs))
        if len(seqs) == 0: return 5

        # alignment sequences
        alifile = pfile('.aln.fasta')
        if self.args.force or not os.path.isfile(alifile):
            with user_message('\nAligning retrieved sequences...', '\n'):
                if not AlignmentUtils.align(seqs, outfile=alifile): return 6
            self.args.force = True
        else: print '\n%s already exists. Using existing alignment.' % alifile

        # build a tree
        treefile = pfile('.aln.tre')
        if self.args.force or not os.path.isfile(treefile):
            with user_message('\nBuilding an approximate-ML tree with fasttree...', '\n'):
                args = {'nt': True} if not protein else {}
                if self.args.fasttree_args:
                    for arg in self.args.fasttree_args:
                        av = arg.split('=')
                        if len(av) == 1: av.append(True)
                        args[av[0]] = av[1]
                if not PhyloUtils.build_fast_tree(alifile, treefile, **args): return 7
            self.args.force = True
        else: print '\n%s already exists. Using existing tree file.' % treefile

        # annotate the tree
        organisms = Organisms.from_records(seqs)
        colors = PhyloUtils.parse_colors(self.args.colors) if self.args.colors else None
        marks += [q.id for q in query]
        if PhyloUtils.annotate_tree(treefile, organisms,
                                    beautify_leafs=True,
                                    reroot_at=self.args.reroot_at,
                                    collapse_at_level=self.args.collapse_at_level or self.args.collapse_hard,
                                    collapse_hard=self.args.collapse_hard,
                                    mark_leafs=set(marks),
                                    min_support=self.args.min_support,
                                    # hide_support=self.args.hide_support,
                                    hide_taxonomy=self.args.hide_taxonomy,
                                    lineage_colors=colors
                                    ): return 0
        return 8

if __name__ == '__main__':
    Main(run=True)
